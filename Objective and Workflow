### **Mini-Project: Multi-Threaded File Downloader**

#### **Objective:**
Build a program that downloads a file in chunks using multiple threads, where:
1. Each thread downloads a specific part of the file.
2. Threads execute concurrently to improve efficiency.
3. The program merges the downloaded parts into a single file at the end.

---

#### **Steps to Build the Project:**

### 1. **Plan the Workflow**
   - Divide the file into equal-sized chunks.
   - Create threads, where each thread handles downloading one chunk of the file.
   - Synchronize access to shared resources (like disk write operations).
   - Merge the downloaded chunks into the final file.

---

### 2. **Core Concepts to Practice**
   - **Thread Creation:** Use either `Thread` class or `Runnable` interface.
   - **Synchronization:** Ensure threads do not overwrite or conflict when merging chunks.
   - **Concurrency:** Observe how threads handle tasks independently and concurrently.
   - **Error Handling:** Handle thread interruptions, timeouts, and retry logic.

---

### 3. **Code Skeleton**

Hereâ€™s a basic framework to get you started:

```java
import java.io.*;
import java.net.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

class FileDownloader implements Runnable {
    private String fileUrl;
    private String outputFileName;
    private int startByte;
    private int endByte;

    public FileDownloader(String fileUrl, String outputFileName, int startByte, int endByte) {
        this.fileUrl = fileUrl;
        this.outputFileName = outputFileName;
        this.startByte = startByte;
        this.endByte = endByte;
    }

    @Override
    public void run() {
        try {
            // Simulate downloading part of the file
            System.out.println(Thread.currentThread().getName() + " downloading bytes " + startByte + " to " + endByte);

            // Sleep to simulate time delay (e.g., network latency)
            Thread.sleep(1000);

            // Write the downloaded data to a temporary chunk file
            try (FileWriter writer = new FileWriter(outputFileName)) {
                writer.write("Chunk from " + startByte + " to " + endByte); // Placeholder
            }

            System.out.println(Thread.currentThread().getName() + " finished downloading.");
        } catch (Exception e) {
            System.out.println("Error in thread " + Thread.currentThread().getName() + ": " + e.getMessage());
        }
    }
}

public class Main {
    public static void main(String[] args) {
        String fileUrl = "https://example.com/file"; // Replace with an actual URL
        int fileSize = 1000; // Example total file size (bytes)
        int chunkSize = 250; // Each thread downloads 250 bytes

        // Calculate the number of chunks
        int numberOfChunks = (int) Math.ceil((double) fileSize / chunkSize);

        // Create a thread pool for efficient thread management
        ExecutorService executor = Executors.newFixedThreadPool(4);

        for (int i = 0; i < numberOfChunks; i++) {
            int startByte = i * chunkSize;
            int endByte = Math.min((i + 1) * chunkSize - 1, fileSize);

            // Each thread downloads a specific range
            executor.execute(new FileDownloader(fileUrl, "chunk_" + i + ".tmp", startByte, endByte));
        }

        // Shutdown the executor
        executor.shutdown();
        while (!executor.isTerminated()) {
            // Wait for all threads to finish
        }

        System.out.println("All chunks downloaded. Proceed to merge them.");
    }
}
```

---

### 4. **Enhancements**
- **Merge Chunks:**
   - After all threads finish, read the temporary chunk files and merge them into a single file.
   ```java
   public static void mergeChunks(int numberOfChunks, String outputFile) throws IOException {
       try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile))) {
           for (int i = 0; i < numberOfChunks; i++) {
               try (BufferedReader reader = new BufferedReader(new FileReader("chunk_" + i + ".tmp"))) {
                   String line;
                   while ((line = reader.readLine()) != null) {
                       writer.write(line);
                       writer.newLine();
                   }
               }
           }
       }
       System.out.println("All chunks merged into " + outputFile);
   }
   ```

- **Error Handling and Retry Logic:**
   - Retry downloading if a thread fails.
   - Handle exceptions such as `IOException` and `InterruptedException`.

- **Add Progress Monitoring:**
   - Show a progress bar to indicate the overall download progress.

---

### 5. **Outcome**
This mini-project will help you practice:
- Creating and managing threads.
- Using synchronization for merging.
- Implementing thread pooling with `ExecutorService`.
- Understanding real-world scenarios where multithreading boosts efficiency.

Let me know if you'd like help expanding this project or diving into other thread-related practices!
